import cv2
import mediapipe as mp
import pygame
import sys
import random
import math
from pygame import mixer

# Initialize Pygame
pygame.init()

# Set up the display
width, height = 800, 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("The Shaktiman Game")
icon = pygame.image.load("shaktiman image.png")
pygame.display.set_icon(icon)

background = pygame.image.load("bg5.jpeg")
mixer.music.load("stranger-things-124008.mp3")
mixer.music.play(-1)

playerimg = pygame.image.load("shaktimanicon.png")
player_width = 100
player_height = 150
playerX = width // 2 - player_width // 2
playerY = 430

enemy_types = ["type1", "type2", "type3", "type4"]  # Add more enemy types as needed
enemy_images = {
    "type1": pygame.image.load("enemy1 (3).png"),
    "type2": pygame.image.load("enemy2 (2).png"),
    "type3": pygame.image.load("enemy3 (2).png"),
    "type4": pygame.image.load("enemy4 (3).png"),
}

enemies = []
num_of_enemies = 10

for i in range(num_of_enemies):
    enemy_type = random.choice(enemy_types)
    enemies.append({
        "img": enemy_images[enemy_type],
        "x": random.randint(0, 600),
        "y": random.randint(0, 200),
        "x_change": random.choice([-4, 4]),
        "y_change": 40,
        "type": enemy_type,
    })

bulletimg = pygame.image.load("shoot.png")
bulletX = 0
bulletY = 450
bulletY_change = 30
bullet_state = "ready"

score_value = 0
font = pygame.font.Font("freesansbold.ttf", 32)
textX = 10
textY = 10

# Game Over
over_font = pygame.font.Font('freesansbold.ttf', 64)

def show_score(x, y):
    score = font.render("Score: " + str(score_value), True, (150, 255, 255))
    screen.blit(score, (x, y))

def game_over_text():
    over_text = over_font.render("GAME OVER", True, (255, 0, 0))
    screen.blit(over_text, (200, 250))

def player(x, y):
    screen.blit(playerimg, (x, y))

def enemy(x, y, img):
    screen.blit(img, (x, y))

def draw_bullet(x, y):
    screen.blit(bulletimg, (x, y))

def incollision(enemyX, enemyY, bulletX, bulletY):
    distance = math.sqrt((math.pow(enemyX - bulletX, 2)) + (math.pow(enemyY - bulletY, 2)))
    return distance < 35

# Initialize Mediapipe
mp_hands = mp.solutions.hands
hands = mp_hands.Hands()

# Initialize the video capture
cap = cv2.VideoCapture(0)

# Replay button setup
replay_button_rect = pygame.Rect(width // 2 - 75, height // 2 + 24, 150, 40)
replay_font = pygame.font.Font('freesansbold.ttf', 32)

# Pause button setup
pause_button_rect = pygame.Rect(700, 0, 150, 40)
pause_font = pygame.font.Font('freesansbold.ttf', 32)

game_over = False
paused = False
music_paused = False  # New variable to track the music state

# Game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        if event.type == pygame.MOUSEBUTTONDOWN:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            if replay_button_rect.collidepoint(mouse_x, mouse_y) and game_over:
                # Reset the game
                game_over = False
                paused = False
                music_paused = False  # Reset the music state
                score_value = 0
                enemies = []
                for i in range(num_of_enemies):
                    enemy_type = random.choice(enemy_types)
                    enemies.append({
                        "img": enemy_images[enemy_type],
                        "x": random.randint(0, 600),
                        "y": random.randint(0, 200),
                        "x_change": random.choice([-4, 4]),
                        "y_change": 40,
                        "type": enemy_type,
                    })
            elif pause_button_rect.collidepoint(mouse_x, mouse_y) and not game_over:
                paused = not paused  # Toggle pause state
                if paused:
                    mixer.music.pause()  # Pause the music when the game is paused
                    music_paused = True
                else:
                    mixer.music.unpause()  # Unpause the music when the game is resumed
                    music_paused = False

    if not paused:
        # Capture video from the camera
        ret, frame = cap.read()
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = hands.process(frame_rgb)

        if results.multi_hand_landmarks:
            hand_landmarks = results.multi_hand_landmarks[0]
            hand_center_x = int(hand_landmarks.landmark[mp_hands.HandLandmark.WRIST].x * width)
            playerX = width - (hand_center_x + player_width // 2)

        # Draw the background
        screen.fill((0, 255, 255))
        screen.blit(background, (0, 0))

        # Draw enemies
        for enemy_data in enemies:
            if enemy_data["y"] > 400 and enemy_data["x"] > 200:
                for enemy_data_j in enemies:
                    enemy_data_j["y"] = 2000
                game_over_text()
                game_over = True  # Set game over state
                break

            enemy_data["x"] += enemy_data["x_change"]
            if enemy_data["x"] <= 0:
                enemy_data["x_change"] = 8
                enemy_data["y"] += enemy_data["y_change"]
            elif enemy_data["x"] >= 740:
                enemy_data["x_change"] = -8
                enemy_data["y"] += enemy_data["y_change"]
            collision = incollision(enemy_data["x"], enemy_data["y"], bulletX, bulletY)
            if collision:
                explosionSound = mixer.Sound("explosion.wav")
                explosionSound.play()
                bullet_state = "ready"
                score_value += 1
                enemy_data["x"] = random.randint(0, 800)
                enemy_data["y"] = random.randint(0, 200)

            enemy(enemy_data["x"], enemy_data["y"], enemy_data["img"])

        # Draw the player
        player(playerX, playerY)

        # Draw the bullet
        if bullet_state == "fire":
            draw_bullet(bulletX, bulletY)
            bulletY -= bulletY_change

            # Reset the bullet when it goes off the screen
            if bulletY < 0:
                bullet_state = "ready"

        # Fire bullet when hand is open
        if results.multi_hand_landmarks:
            hand_landmarks = results.multi_hand_landmarks[0]
            is_hand_open = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].y < hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP].y
            if is_hand_open:
                if bullet_state == "ready":
                    bulletX = playerX
                    bulletY = playerY - 40
                    bullet_state = "fire"

        # Draw the score
        show_score(textX, textY)

        # Draw replay button when the game is over
        if game_over:
            pygame.draw.rect(screen, (0, 255, 0), replay_button_rect)
            replay_text = replay_font.render("Replay", True, (0, 0, 0))
            screen.blit(replay_text, (width // 2 - 58, height // 2 + 30))

        # Draw pause button
        pygame.draw.rect(screen, (255, 55, 25), pause_button_rect)
        pause_text = pause_font.render("Pause", True, (0, 0, 0))
        screen.blit(pause_text, (700, 0))

    pygame.display.update()

pygame.quit()
